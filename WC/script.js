class DatingChat {
    constructor() {
        this.userPhotos = [];
        this.participants = new Map();
        this.currentUserId = this.generateUserId();
        this.emojiPickerVisible = false;
        
        this.init();
    }

    generateUserId() {
        return 'user_' + Math.random().toString(36).substr(2, 9);
    }

    init() {
        this.setupEventListeners();
        this.loadUserData();
        this.simulateOtherUsers();
        this.createStars();
    }

    setupEventListeners() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        document.getElementById('avatarUpload').addEventListener('change', (e) => {
            this.handlePhotoUpload(e.target.files);
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Enter
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ —ç–º–æ–¥–∑–∏-–ø–∏–∫–µ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.emoji-picker')) {
                this.hideEmojiPicker();
            }
        });
    }

    handlePhotoUpload(files) {
        if (this.userPhotos.length + files.length > 5) {
            alert('–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!');
            return;
        }

        Array.from(files).forEach(file => {
            if (file.type.startsWith('image/')) {
                this.compressImage(file, 600, 600)
                    .then(compressedFile => {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            this.userPhotos.push(e.target.result);
                            this.updatePhotoPreview();
                            this.saveUserData();
                        };
                        reader.readAsDataURL(compressedFile);
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                    });
            }
        });
    }

    compressImage(file, maxWidth, maxHeight) {
        return new Promise((resolve, reject) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();

            img.onload = () => {
                let width = img.width;
                let height = img.height;

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                if (width > height) {
                    if (width > maxWidth) {
                        height *= maxWidth / width;
                        width = maxWidth;
                    }
                } else {
                    if (height > maxHeight) {
                        width *= maxHeight / height;
                        height = maxHeight;
                    }
                }

                canvas.width = width;
                canvas.height = height;

                ctx.drawImage(img, 0, 0, width, height);

                canvas.toBlob(blob => {
                    resolve(new File([blob], file.name, {
                        type: 'image/jpeg',
                        lastModified: Date.now()
                    }));
                }, 'image/jpeg', 0.8);
            };

            img.onerror = reject;
            img.src = URL.createObjectURL(file);
        });
    }

    updatePhotoPreview() {
        const preview = document.getElementById('photoPreview');
        preview.innerHTML = '';

        this.userPhotos.forEach((photo, index) => {
            const img = document.createElement('img');
            img.src = photo;
            img.alt = `–§–æ—Ç–æ ${index + 1}`;
            img.onclick = () => this.showFullPhoto(photo);
            preview.appendChild(img);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–µ—Ä–≤—ã–º —Ñ–æ—Ç–æ
        if (this.userPhotos.length > 0) {
            document.getElementById('userAvatar').src = this.userPhotos[0];
        }
    }

    showFullPhoto(photo) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            cursor: pointer;
        `;
        
        const img = document.createElement('img');
        img.src = photo;
        img.style.cssText = `
            max-width: 90%;
            max-height: 90%;
            border-radius: 10px;
            box-shadow: 0 0 30px rgba(79, 195, 247, 0.5);
        `;

        modal.appendChild(img);
        modal.onclick = () => document.body.removeChild(modal);
        document.body.appendChild(modal);
    }

    sendMessage() {
        const input = document.getElementById('messageInput');
        const message = input.value.trim();

        if (message) {
            this.addMessage('–í—ã', message, 'user');
            input.value = '';
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            setTimeout(() => this.simulateReply(message), 1000 + Math.random() * 3000);
        }
    }

    addMessage(sender, text, type) {
        const messagesContainer = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;

        const now = new Date();
        const timeString = now.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });

        messageDiv.innerHTML = `
            <div class="message-header">${sender} ‚Ä¢ ${timeString}</div>
            <div class="message-text">${this.formatMessage(text)}</div>
        `;

        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        messageDiv.classList.add('new-message');
        setTimeout(() => messageDiv.classList.remove('new-message'), 500);

        this.saveChatHistory();
    }

    formatMessage(text) {
        // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç–∞
        return text.replace(/\n/g, '<br>');
    }

    simulateOtherUsers() {
        const fakeUsers = [
            { name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫', id: 'user1' },
            { name: '–õ—É–Ω–Ω–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞', id: 'user2' },
            { name: '–ó–≤–µ–∑–¥–Ω—ã–π –≤–æ–∏–Ω', id: 'user3' },
            { name: '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', id: 'user4' }
        ];

        fakeUsers.forEach(user => {
            this.participants.set(user.id, user);
            this.addParticipant(user.name, user.id);
        });

        document.getElementById('onlineCount').textContent = this.participants.size + 1;

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        setInterval(() => {
            if (Math.random() > 0.7) {
                const randomUser = fakeUsers[Math.floor(Math.random() * fakeUsers.length)];
                const messages = [
                    '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –¥–µ–ª–∞? üåü',
                    '–ö—Ç–æ-–Ω–∏–±—É–¥—å –∑–¥–µ—Å—å –ª—é–±–∏—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∑–≤–µ–∑–¥—ã? üåå',
                    '–°–µ–≥–æ–¥–Ω—è –≤–∏–¥–µ–ª –ø—Ä–æ–ª–µ—Ç–∞—é—â—É—é –∫–æ–º–µ—Ç—É! üöÄ',
                    '–ö–∞–∫ –≤–∞–º –Ω–æ–≤–∞—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞? üí´',
                    '–ö—Ç–æ —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –º–µ–∂–∑–≤–µ–∑–¥–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? üëΩ',
                    '–õ—é–±–ª—é —ç—Ç–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–∞—Ç—ã... üåÖ',
                    '–¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –æ —á–µ—Ä–Ω—ã—Ö –¥—ã—Ä–∞—Ö! üìö',
                    '–ï—Å—Ç—å –∑–¥–µ—Å—å –∞—Å—Ç—Ä–æ–Ω–æ–º—ã? üî≠'
                ];
                const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                this.addMessage(randomUser.name, randomMessage, 'other');
            }
        }, 10000);
    }

    simulateReply(userMessage) {
        if (Math.random() > 0.3) {
            const fakeUsers = Array.from(this.participants.values());
            const randomUser = fakeUsers[Math.floor(Math.random() * fakeUsers.length)];
            
            const replies = {
                '–ø—Ä–∏–≤–µ—Ç': ['–ü—Ä–∏–≤–µ—Ç! üëã', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! üåü', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üöÄ'],
                '–∫–∞–∫ –¥–µ–ª–∞': ['–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–±–ª—é–¥–∞—é –∑–∞ –∑–≤–µ–∑–¥–∞–º–∏! üåå', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø–ª–∞–Ω–∏—Ä—É—é –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø–æ–ª–µ—Ç! üëΩ', '–•–æ—Ä–æ—à–æ, –∏–∑—É—á–∞—é –Ω–æ–≤—ã–µ –≥–∞–ª–∞–∫—Ç–∏–∫–∏! üí´'],
                'default': [
                    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ? üëÄ',
                    '–ü–æ–Ω—è—Ç–Ω–æ! –ê —á—Ç–æ –¥—É–º–∞–µ—à—å –æ –∫–æ—Å–º–æ—Å–µ? üå†',
                    '–ó–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ! –•–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã? ‚≠ê'
                ]
            };

            let reply;
            const lowerMessage = userMessage.toLowerCase();

            if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç')) reply = replies['–ø—Ä–∏–≤–µ—Ç'];
            else if (lowerMessage.includes('–∫–∞–∫ –¥–µ–ª–∞')) reply = replies['–∫–∞–∫ –¥–µ–ª–∞'];
            else reply = replies['default'];

            const randomReply = reply[Math.floor(Math.random() * reply.length)];
            this.addMessage(randomUser.name, randomReply, 'other');
        }
    }

    addParticipant(name, id) {
        const participantsList = document.getElementById('participantsList');
        const participantDiv = document.createElement('div');
        participantDiv.className = 'participant';
        participantDiv.id = `participant-${id}`;

        participantDiv.innerHTML = `
            <div class="participant-avatar">${name.charAt(0)}</div>
            <div class="participant-info">
                <div class="participant-name">${name}</div>
                <div class="participant-status online">online</div>
            </div>
        `;

        participantsList.appendChild(participantDiv);
    }

    toggleEmojiPicker() {
        this.emojiPickerVisible = !this.emojiPickerVisible;
        const emojiGrid = document.getElementById('emojiGrid');
        
        if (this.emojiPickerVisible) {
            emojiGrid.classList.add('show');
        } else {
            emojiGrid.classList.remove('show');
        }
    }

    hideEmojiPicker() {
        this.emojiPickerVisible = false;
        document.getElementById('emojiGrid').classList.remove('show');
    }

    addEmoji(emoji) {
        const input = document.getElementById('messageInput');
        input.value += emoji;
        input.focus();
        this.hideEmojiPicker();
    }

    createStars() {
        this.createStarLayer('stars', 200, 3);
        this.createStarLayer('stars2', 100, 2);
        this.createStarLayer('stars3', 50, 1);
    }

    createStarLayer(layerId, count, size) {
        const layer = document.getElementById(layerId);
        for (let i = 0; i < count; i++) {
            const star = document.createElement('div');
            star.style.cssText = `
                position: absolute;
                width: ${size}px;
                height: ${size}px;
                background: white;
                border-radius: 50%;
                top: ${Math.random() * 100}%;
                left: ${Math.random() * 100}%;
                animation: twinkle ${2 + Math.random() * 3}s infinite;
                animation-delay: ${Math.random() * 5}s;
            `;
            layer.appendChild(star);
        }
    }

    saveUserData() {
        const userData = {
            photos: this.userPhotos,
            userId: this.currentUserId
        };
        localStorage.setItem('cosmicDatingData', JSON.stringify(userData));
    }

    loadUserData() {
        const saved = localStorage.getItem('cosmicDatingData');
        if (saved) {
            const userData = JSON.parse(saved);
            this.userPhotos = userData.photos || [];
            this.currentUserId = userData.userId || this.currentUserId;
            this.updatePhotoPreview();
        }
    }

    saveChatHistory() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        const messages = document.getElementById('chatMessages').innerHTML;
        localStorage.setItem('cosmicChatHistory', messages);
    }

    loadChatHistory() {
        const saved = localStorage.getItem('cosmicChatHistory');
        if (saved) {
            document.getElementById('chatMessages').innerHTML = saved;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
function toggleEmojiPicker() {
    window.datingChat.toggleEmojiPicker();
}

function addEmoji(emoji) {
    window.datingChat.addEmoji(emoji);
}

function sendMessage() {
    window.datingChat.sendMessage();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.datingChat = new DatingChat();
});
